Fitting
=======

To run MagAl, you will need three files:

* Library File, generated by ``magal_library` script. See `libraries` for more info.

* Input File, which will be generated by the ``magal_input`` script. See `input` for more info.

* Configuration File, which will be described on the next section.



Ini file keywords
^^^^^^^^^^^^^^^^^

Section : ``[FitGeneral]``

* ``fit_mode`` : string. Optional. Default: brute. Fitting mode: ``brute`` for common magal fitting and ``emcee`` for
  MCMC fit. If ``emcee``, it will override ``input_file`` and use the model defined in the ``[EmceeModel]`` section.

* ``input_file`` : string. Input filename.

* ``library_file`` : string. Library filename.

* ``filter_sys`` : string. Filter system name.

* ``ccd`` : int. CCD number id.

* ``output_file`` : string. Output filename

* ``Nobj_max`` : int. Optional. Max number of objects to fit. Useful for tests.

* ``allow_overwrite`` : bool. Optional. If ``True``, allows ``magal_fit`` to overwrite the ``output_file``.

* ``zp_error`` : float. Optional. Zero point error. It will be quadratically summed to the galaxies error.
  E.g.: :math:`e_i = \sqrt{e_i^2 + e_{zp}^2}` .

* ``allow_multiprocessing`` : bool. Default: ``False``. Optional. If ``True``, ``magal_fit`` will use multiprocessing.

* ``Nz`` :

* ``filter_include`` :

* ``filters_exclude`` :

* ``fudge_factor`` :

Section : ``[FitSimulation]`` . Optional.

* ``is_simulation`` : bool

* ``obj_z`` :

* ``mass_field`` :


Section : ``[EmceeModel]`` . Optional.

* ``model_type`` : string. Only model type available now is ``two_exp``. ``two_exp`` model is defined by FIXME: :math:`\lambda`

* ``model_prior`` : dict. Model prior definition. ``two_exp`` prior is in the form of a dictionary like:

.. code-block:: python

    {'property': [min, max]}


``two_exp`` model defaults:

.. code-block:: python

    {'t0_young': (np.log10(6e6), np.log10(5e9)),  # t0 for the younger component
     'theta_young': np.log10([0.001, 1000]),      # Theta for the younger component
     't0_old': (np.log10(1e9), np.log10(14e9)),   # t0 for the older component
     'theta_old': np.log10([0.001, 1000]),        # Theta for the older component
     'frac_young': [0, 1],                        # Percentage of the young component
     'tau_v': [0, 2],                             # Charlot&Fall 2000 tau_v interval
     'Z': []}                                     # Metallicity If [], it will use all base metallicities


Example: NONONON
^^^^^^^^^^^^^^^^

aa

Example: Fitting using ``emcee``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

